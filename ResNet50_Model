import tensorflow as tf
from tensorflow.keras import datasets, models, layers
from tensorflow.keras.applications import ResNet50V2
from tensorflow.keras.utils import to_categorical

# Load CIFAR-10 dataset
(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()
train_images = train_images / 255
test_images = test_images / 255
train_labels, test_labels = to_categorical(train_labels, num_classes=10), to_categorical(test_labels, num_classes=10)

# Define ResNet model
def build_resnet():
    base_model = ResNet50V2(weights='imagenet', include_top=False, input_shape=(32, 32, 3))
    x = layers.BatchNormalization()(base_model.output)
    x = layers.GlobalAveragePooling2D()(base_model.output)
    x = layers.Dense(10, activation='relu')(x)
    predictions = layers.Dense(10, activation='softmax')(x)
    model = models.Model(inputs=base_model.input, outputs=predictions)
    return model

batch_size = 256
epochs = 2
# Build ResNet model
resnet_model = build_resnet()
resnet_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Training loop for the desired number of epochs
for epoch in range(epochs):
    resnet_model.fit(train_images, train_labels, batch_size=batch_size, epochs=1, shuffle=True)
    test_loss, test_accuracy = resnet_model.evaluate(test_images, test_labels)
    print(f"Test accuracy after {epoch + 1} epochs: {test_accuracy:.4f}")

# Evaluate the final model
test_loss_adv, test_accuracy_adv = resnet_model.evaluate(test_images, test_labels)
print(f"Final Test accuracy of the Resnet Model: {test_accuracy_adv}")
